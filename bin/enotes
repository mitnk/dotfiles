#!/usr/local/bin/python3
import glob
import os
import subprocess

ROOT = os.getenv('ENOTES_DIR')

if not ROOT or not os.path.exists(ROOT):
    print('invalid enote root: {}'.format(ROOT))
    exit(1)
if not ROOT.endswith('/'):
    ROOT += '/'


def get_md_list(root):
    return glob.glob(os.path.join(root, '*.md'))


def get_category_list(args):
    result = []
    for root, dirs, files in os.walk(ROOT):
        prefix = root.replace(ROOT, '')
        if prefix.startswith('.git') or prefix.startswith('statics'):
            continue

        if args.category and not prefix.startswith(args.category):
            continue

        md_count = len(get_md_list(root))
        if md_count == 0:
            continue

        result.append((prefix, md_count))

    for p, c in sorted(result):
        print('- {} [{}]'.format(p, c))


def show_latest(args):
    if not args.ptn:
        count = 20
    else:
        count = int(args.ptn)
    cmd = "find {} -type f -name '*.md' | ".format(ROOT.rstrip('/'))
    if args.category:
        cmd += " grep '/{}/' | ".format(args.category)
    cmd += "xargs ls -t | " \
        "head -n {} | " \
        "xargs exa -lh -s time".format(count)
    subprocess.run(cmd, shell=True)



def do_search(args):
    rg_args = ['/usr/local/bin/rg']
    if not args.show_content:
        rg_args.append('-l')
    if args.ignore_case:
        rg_args.append('-i')
    if args.word_boundary:
        rg_args.append('-w')

    if not args.ptn:
        print('search-pattern is needed')
        exit(1)

    rg_args.append(args.ptn)
    rg_args.append(ROOT)

    if args.category:
        rg_args_files = ['/usr/local/bin/rg', '--files', '-g']
        path_ptn = '**/*{}*/**'.format(args.category)
        rg_args_files.append(path_ptn)
        rg_args_files.append(ROOT)
        output = subprocess.check_output(rg_args_files).decode('utf-8')
        rg_args.pop()
        for x in output.split('\n'):
            if not x.strip():
                continue
            rg_args.append(x)

    if args.verbose:
        print('running {}'.format(' '.join(rg_args)))

    subprocess.run(rg_args)


def main(args):
    if args.cl:
        get_category_list(args)
        return
    if args.latest:
        show_latest(args)
        return

    do_search(args)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--cl', '--category-list', action='store_true')
    parser.add_argument('-t', '--latest', action='store_true')
    parser.add_argument('-c', '--category', type=str)
    parser.add_argument('-i', '--ignore-case', action='store_true')
    parser.add_argument('-w', '--word-boundary', action='store_true')
    parser.add_argument('-L', '--show-content', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('ptn', nargs='?', help='search pattern')
    args = parser.parse_args()
    main(args)
